/**
 * Configuraci√≥n de autenticaci√≥n autom√°tica para Swagger UI
 * Este m√≥dulo proporciona funciones para configurar autom√°ticamente
 * el token JWT en todas las interfaces de Swagger UI
 * 
 * NOTA: Convertido a formato compatible con CSP (sin ES6 modules)
 */

// Namespace global para evitar conflictos
window.SwaggerAuth = window.SwaggerAuth || {};

// Variable global para evitar m√∫ltiples listeners
let authListenerSetup = false;

/**
 * Crea una configuraci√≥n de Swagger UI con autenticaci√≥n autom√°tica
 * @param {Object} baseConfig - Configuraci√≥n base de Swagger UI
 * @returns {Object} Configuraci√≥n extendida con autenticaci√≥n autom√°tica
 */
window.SwaggerAuth.createSwaggerConfig = function(baseConfig) {
  return Object.assign({}, baseConfig, {
    requestInterceptor: function(request) {
      const token = localStorage.getItem('token');
      if (token) {
        request.headers = request.headers || {};
        request.headers.Authorization = 'Bearer ' + token;
        console.log('üîê Token agregado autom√°ticamente a la petici√≥n');
      }
      return request;
    },
    onComplete: function() {
      const token = localStorage.getItem('token');
      if (token && window.ui) {
        // Configurar la autorizaci√≥n autom√°ticamente
        window.ui.preauthorizeApiKey('bearerAuth', token);
        console.log('‚úÖ Token configurado autom√°ticamente en Swagger UI');
      } else if (!token) {
        console.log('‚ö†Ô∏è No hay token disponible para configurar en Swagger UI');
      }
      
      // Ejecutar callback original si existe
      if (baseConfig.onComplete) {
        baseConfig.onComplete();
      }
    },
    onFailure: function(error) {
      console.error('‚ùå Error en Swagger UI:', error);
      
      // Ejecutar callback original si existe
      if (baseConfig.onFailure) {
        baseConfig.onFailure(error);
      }
    }
  });
};

/**
 * Actualiza el token en una instancia de Swagger UI ya existente
 * @param {string} newToken - Nuevo token JWT
 */
window.SwaggerAuth.updateSwaggerToken = function(newToken) {
  if (window.ui) {
    if (newToken) {
      window.ui.preauthorizeApiKey('bearerAuth', newToken);
      console.log('üîÑ Token actualizado en Swagger UI');
    } else {
      // Limpiar autorizaci√≥n si no hay token
      window.ui.preauthorizeApiKey('bearerAuth', '');
      console.log('üßπ Autorizaci√≥n limpiada en Swagger UI');
    }
  }
};

/**
 * Configura un listener para cambios en el estado de autenticaci√≥n
 */
window.SwaggerAuth.setupAuthListener = function() {
  // Evitar configurar m√∫ltiples listeners
  if (authListenerSetup) {
    return;
  }

  // Escuchar cambios en localStorage (para m√∫ltiples pesta√±as)
  window.addEventListener('storage', function(e) {
    if (e.key === 'token') {
      window.SwaggerAuth.updateSwaggerToken(e.newValue);
      console.log('üì± Token actualizado desde otra pesta√±a');
    }
  });

  // Escuchar eventos personalizados de autenticaci√≥n
  window.addEventListener('authStateChanged', function(e) {
    const token = e.detail.isAuthenticated ? localStorage.getItem('token') : null;
    window.SwaggerAuth.updateSwaggerToken(token);
    console.log('üé≠ Evento personalizado de autenticaci√≥n recibido');
  });

  authListenerSetup = true;
  console.log('‚úÖ Listeners de autenticaci√≥n configurados');
};

/**
 * Funci√≥n para disparar manualmente la configuraci√≥n del token
 * √ötil para llamar despu√©s de un login exitoso
 */
window.SwaggerAuth.triggerTokenUpdate = function() {
  const token = localStorage.getItem('token');
  window.SwaggerAuth.updateSwaggerToken(token);
  console.log('üéØ Actualizaci√≥n manual del token ejecutada');
};

/**
 * Funci√≥n para verificar si el usuario est√° autenticado
 * @returns {boolean} True si est√° autenticado
 */
window.SwaggerAuth.isAuthenticated = function() {
  const token = localStorage.getItem('token');
  return !!token;
};

// Exponer funciones para debugging (compatibilidad con versi√≥n anterior)
window.swaggerAuth = {
  updateToken: window.SwaggerAuth.updateSwaggerToken,
  triggerUpdate: window.SwaggerAuth.triggerTokenUpdate,
  isAuthenticated: window.SwaggerAuth.isAuthenticated
};

console.log('üì¶ SwaggerAuth cargado correctamente - Versi√≥n compatible con CSP');
